{"version":3,"sources":["img/pokeball.svg","components/navbar.jsx","components/pokemoncard.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","ButtonAppBar","newState","classes","_React$useState","React","useState","open","vertical","horizontal","_React$useState2","Object","slicedToArray","state","setState","react_default","a","createElement","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","onClick","objectSpread","Menu_default","Typography","variant","src","logo","alt","Snackbar","anchorOrigin","key","concat","onClose","autoHideDuration","ContentProps","aria-describedby","message","id","Pokemoncard","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","error","isLoaded","pokemon","pokemonSpecies","pokemonEvolution","_this2","console","log","pokemonAPICall","fetch","pokemonSpeciesAPICall","pokemonEvolutionAPICall","Promise","all","then","values","map","value","json","data","_this$state","name","sprites","front_default","egg_groups","class","chain","species","evolves_to","height","weight","base_experience","flavor_text_entries","flavor_text","Component","App","components_pokemoncard","Button","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.61292241.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokeball.2b4798f5.svg\";","import React from \"react\";\r\nimport \"./navbar.css\";\r\nimport logo from \"../img/pokeball.svg\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2)\r\n  },\r\n  title: {\r\n    flexGrow: 1\r\n  }\r\n}));\r\n\r\nexport default function ButtonAppBar() {\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useState({\r\n    open: false,\r\n    vertical: \"top\",\r\n    horizontal: \"center\"\r\n  });\r\n\r\n  const { vertical, horizontal, open } = state;\r\n\r\n  const handleClick = newState => () => {\r\n    setState({ open: true, ...newState });\r\n  };\r\n\r\n  function handleClose() {\r\n    setState({ ...state, open: false });\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton\r\n            edge=\"start\"\r\n            className={classes.menuButton}\r\n            color=\"inherit\"\r\n            aria-label=\"Menu\"\r\n            onClick={handleClick({ vertical: \"top\", horizontal: \"left\" })}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            <img src={logo} className=\"navbar-logo\" alt=\"pokeball\" />\r\n            Pokedex\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Snackbar\r\n        anchorOrigin={{ vertical, horizontal }}\r\n        key={`${vertical},${horizontal}`}\r\n        open={open}\r\n        onClose={handleClose}\r\n        autoHideDuration=\"1000\"\r\n        ContentProps={{\r\n          \"aria-describedby\": \"message-id\"\r\n        }}\r\n        message={<span id=\"message-id\">Do not work...yet!</span>}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport \"./pokemoncard.css\";\r\n\r\nclass Pokemoncard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n      pokemon: [],\r\n      pokemonSpecies: [],\r\n      pokemonEvolution: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(\"Pokemon - Mounted\");\r\n    let pokemonAPICall = fetch(\"https://pokeapi.co/api/v2/pokemon/1\");\r\n    let pokemonSpeciesAPICall = fetch(\r\n      \"https://pokeapi.co/api/v2/pokemon-species/1\"\r\n    );\r\n    let pokemonEvolutionAPICall = fetch(\r\n      \"https://pokeapi.co/api/v2/evolution-chain/1\"\r\n    );\r\n    Promise.all([\r\n      pokemonAPICall,\r\n      pokemonSpeciesAPICall,\r\n      pokemonEvolutionAPICall\r\n    ])\r\n      .then(values => Promise.all(values.map(value => value.json())))\r\n      .then(\r\n        data => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            pokemon: data[0],\r\n            pokemonSpecies: data[1],\r\n            pokemonEvolution: data[2]\r\n          });\r\n        },\r\n        error => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            error\r\n          });\r\n        }\r\n      );\r\n    console.log(this.state.pokemon);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      error,\r\n      isLoaded,\r\n      pokemon,\r\n      pokemonSpecies,\r\n      pokemonEvolution\r\n    } = this.state;\r\n    if (error) {\r\n      return <div>Error: {error.message}</div>;\r\n    } else if (!isLoaded) {\r\n      return <div>Loading...</div>;\r\n    } else {\r\n      return (\r\n        <div className={\"product-card \" + pokemonSpecies.color.name}>\r\n          <div className=\"product-additional\">\r\n            <div className=\"product-img-card\">\r\n              <div className=\"product-type product-center\">NÂ°{pokemon.id}</div>\r\n              <div className=\"product-img product-center\">\r\n                <img src={pokemon.sprites.front_default} />\r\n              </div>\r\n              <div className=\"product-status product-center\">\r\n                {pokemonSpecies.egg_groups[0].name}\r\n              </div>\r\n\r\n              <i class=\"fa fa-language product-center\" />\r\n            </div>\r\n            <div className=\"product-more-info\">\r\n              <h1>{pokemon.name}</h1>\r\n              <p />\r\n\r\n              <div class=\"product-coords\">\r\n                <span>Evolution chain:</span>\r\n              </div>\r\n              <br />\r\n              <div class=\"product-evolution\">\r\n                {pokemonEvolution.chain.species.name}\r\n              </div>\r\n              <div class=\"product-evolution\">\r\n                {pokemonEvolution.chain.evolves_to[0].species.name}\r\n              </div>\r\n              <div class=\"product-evolution\">\r\n                {\r\n                  pokemonEvolution.chain.evolves_to[0].evolves_to[0].species\r\n                    .name\r\n                }\r\n              </div>\r\n\r\n              <div class=\"product-stats\">\r\n                <div>\r\n                  <div class=\"title\">Height</div>\r\n                  <i class=\"fa fa-language\" />\r\n                  <div class=\"value\">{pokemon.height / 10}m</div>\r\n                </div>\r\n                <div>\r\n                  <div class=\"title\">weight</div>\r\n                  <i class=\"fa fa-desktop\" />\r\n                  <div class=\"value\">{pokemon.weight / 10}kg</div>\r\n                </div>\r\n                <div>\r\n                  <div class=\"title\">XP</div>\r\n                  <i class=\"fa fa-feed\" />\r\n                  <div class=\"value\">{pokemon.base_experience}</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"product-general\">\r\n            <h1>{pokemon.name}</h1>\r\n            <p>{pokemonSpecies.flavor_text_entries[1].flavor_text}</p>\r\n            <span class=\"product-more\">Mouse over the card for more info</span>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Pokemoncard;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport \"typeface-roboto\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Navbar from \"./components/navbar\";\r\nimport Pokemoncard from \"./components/pokemoncard\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Navbar />\r\n      <header className=\"App-header\">\r\n        <Pokemoncard />\r\n\r\n        <Button variant=\"contained\" color=\"primary\">\r\n          Let's change the world!\r\n        </Button>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}